using Newtonsoft.Json;

namespace PayGram.Public
{
	public class PaygramRequest : IPaygramRequest
	{
		public long RequestId { get; set; }
		/// <summary>
		/// The UserId at the client side that originated this request
		/// Null if this request was not generated by the user
		/// </summary>
		public string? UserCliId { get; set; }
		/// <summary>
		/// If specified, this request will have this unique marker. if another request is present with this marker, it will not be processed.
		/// This is useful when the client has to make sure that a request is performed only once for a specific client-side-event.
		/// Example: the client receives a callback that triggers a transfer. The client might receive the callback multiple times, but only one transfer has to go through. 
		/// In this case, the client can specify the same clientunique that he received on the callback and the mechanism will be guaranteed
		/// </summary>
		public string? ClientUnique { get; set; }
		public PaygramRequest()
		{
			RequestId = 0;
		}
		public PaygramRequest(long id)
		{
			RequestId = id;
		}
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented,
													new JsonSerializerSettings() { DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate });
		}
	}
}
